import { Equal, Expect } from "type-testing"
import type { I64MultiplyBinary } from '../multiply';
import { t, T } from '../test-cases/arithmetic-i64';
import { expect, test } from 'vitest';
import { twosComplementToBigInt, bigIntToTwosComplement, arithmeticBigInt } from "../test-utils";

test.each(t)('$a_binary64 * $b_binary64 === $mul_binary64', ({ a_binary64, b_binary64, mul_binary64 }) => {
  const actual = arithmeticBigInt.mul(twosComplementToBigInt(a_binary64), twosComplementToBigInt(b_binary64));
  const actual_binary64 = bigIntToTwosComplement(actual);
  expect(actual_binary64).toBe(mul_binary64);
})

type i = 72
type a = T[i]['a']  // =>
type b = T[i]['b']  // =>
type e = T[i]['mul']// =>
type ab = T[i]['a_binary64']       // =>
type bb = T[i]['b_binary64']       // =>
type eb = T[i]['mul_binary64']     // =>
type xb = I64MultiplyBinary<ab, bb>// =>

type tests = [
  Expect<Equal<I64MultiplyBinary<T[  0]['a_binary64'], T[  0]['b_binary64']>, T[  0]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  1]['a_binary64'], T[  1]['b_binary64']>, T[  1]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  2]['a_binary64'], T[  2]['b_binary64']>, T[  2]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  3]['a_binary64'], T[  3]['b_binary64']>, T[  3]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  4]['a_binary64'], T[  4]['b_binary64']>, T[  4]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  5]['a_binary64'], T[  5]['b_binary64']>, T[  5]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  6]['a_binary64'], T[  6]['b_binary64']>, T[  6]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  7]['a_binary64'], T[  7]['b_binary64']>, T[  7]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  8]['a_binary64'], T[  8]['b_binary64']>, T[  8]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[  9]['a_binary64'], T[  9]['b_binary64']>, T[  9]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 10]['a_binary64'], T[ 10]['b_binary64']>, T[ 10]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 11]['a_binary64'], T[ 11]['b_binary64']>, T[ 11]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 12]['a_binary64'], T[ 12]['b_binary64']>, T[ 12]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 13]['a_binary64'], T[ 13]['b_binary64']>, T[ 13]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 14]['a_binary64'], T[ 14]['b_binary64']>, T[ 14]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 15]['a_binary64'], T[ 15]['b_binary64']>, T[ 15]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 16]['a_binary64'], T[ 16]['b_binary64']>, T[ 16]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 17]['a_binary64'], T[ 17]['b_binary64']>, T[ 17]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 18]['a_binary64'], T[ 18]['b_binary64']>, T[ 18]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 19]['a_binary64'], T[ 19]['b_binary64']>, T[ 19]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 20]['a_binary64'], T[ 20]['b_binary64']>, T[ 20]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 21]['a_binary64'], T[ 21]['b_binary64']>, T[ 21]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 22]['a_binary64'], T[ 22]['b_binary64']>, T[ 22]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 23]['a_binary64'], T[ 23]['b_binary64']>, T[ 23]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 24]['a_binary64'], T[ 24]['b_binary64']>, T[ 24]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 25]['a_binary64'], T[ 25]['b_binary64']>, T[ 25]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 26]['a_binary64'], T[ 26]['b_binary64']>, T[ 26]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 27]['a_binary64'], T[ 27]['b_binary64']>, T[ 27]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 28]['a_binary64'], T[ 28]['b_binary64']>, T[ 28]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 29]['a_binary64'], T[ 29]['b_binary64']>, T[ 29]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 30]['a_binary64'], T[ 30]['b_binary64']>, T[ 30]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 31]['a_binary64'], T[ 31]['b_binary64']>, T[ 31]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 32]['a_binary64'], T[ 32]['b_binary64']>, T[ 32]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 33]['a_binary64'], T[ 33]['b_binary64']>, T[ 33]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 34]['a_binary64'], T[ 34]['b_binary64']>, T[ 34]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 35]['a_binary64'], T[ 35]['b_binary64']>, T[ 35]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 36]['a_binary64'], T[ 36]['b_binary64']>, T[ 36]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 37]['a_binary64'], T[ 37]['b_binary64']>, T[ 37]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 38]['a_binary64'], T[ 38]['b_binary64']>, T[ 38]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 39]['a_binary64'], T[ 39]['b_binary64']>, T[ 39]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 40]['a_binary64'], T[ 40]['b_binary64']>, T[ 40]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 41]['a_binary64'], T[ 41]['b_binary64']>, T[ 41]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 42]['a_binary64'], T[ 42]['b_binary64']>, T[ 42]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 43]['a_binary64'], T[ 43]['b_binary64']>, T[ 43]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 44]['a_binary64'], T[ 44]['b_binary64']>, T[ 44]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 45]['a_binary64'], T[ 45]['b_binary64']>, T[ 45]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 46]['a_binary64'], T[ 46]['b_binary64']>, T[ 46]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 47]['a_binary64'], T[ 47]['b_binary64']>, T[ 47]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 48]['a_binary64'], T[ 48]['b_binary64']>, T[ 48]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 49]['a_binary64'], T[ 49]['b_binary64']>, T[ 49]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 50]['a_binary64'], T[ 50]['b_binary64']>, T[ 50]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 51]['a_binary64'], T[ 51]['b_binary64']>, T[ 51]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 52]['a_binary64'], T[ 52]['b_binary64']>, T[ 52]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 53]['a_binary64'], T[ 53]['b_binary64']>, T[ 53]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 54]['a_binary64'], T[ 54]['b_binary64']>, T[ 54]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 55]['a_binary64'], T[ 55]['b_binary64']>, T[ 55]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 56]['a_binary64'], T[ 56]['b_binary64']>, T[ 56]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 57]['a_binary64'], T[ 57]['b_binary64']>, T[ 57]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 58]['a_binary64'], T[ 58]['b_binary64']>, T[ 58]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 59]['a_binary64'], T[ 59]['b_binary64']>, T[ 59]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 60]['a_binary64'], T[ 60]['b_binary64']>, T[ 60]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 61]['a_binary64'], T[ 61]['b_binary64']>, T[ 61]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 62]['a_binary64'], T[ 62]['b_binary64']>, T[ 62]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 63]['a_binary64'], T[ 63]['b_binary64']>, T[ 63]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 64]['a_binary64'], T[ 64]['b_binary64']>, T[ 64]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 65]['a_binary64'], T[ 65]['b_binary64']>, T[ 65]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 66]['a_binary64'], T[ 66]['b_binary64']>, T[ 66]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 67]['a_binary64'], T[ 67]['b_binary64']>, T[ 67]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 68]['a_binary64'], T[ 68]['b_binary64']>, T[ 68]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 69]['a_binary64'], T[ 69]['b_binary64']>, T[ 69]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 70]['a_binary64'], T[ 70]['b_binary64']>, T[ 70]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 71]['a_binary64'], T[ 71]['b_binary64']>, T[ 71]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 72]['a_binary64'], T[ 72]['b_binary64']>, T[ 72]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 73]['a_binary64'], T[ 73]['b_binary64']>, T[ 73]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 74]['a_binary64'], T[ 74]['b_binary64']>, T[ 74]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 75]['a_binary64'], T[ 75]['b_binary64']>, T[ 75]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 76]['a_binary64'], T[ 76]['b_binary64']>, T[ 76]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 77]['a_binary64'], T[ 77]['b_binary64']>, T[ 77]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 78]['a_binary64'], T[ 78]['b_binary64']>, T[ 78]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 79]['a_binary64'], T[ 79]['b_binary64']>, T[ 79]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 80]['a_binary64'], T[ 80]['b_binary64']>, T[ 80]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 81]['a_binary64'], T[ 81]['b_binary64']>, T[ 81]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 82]['a_binary64'], T[ 82]['b_binary64']>, T[ 82]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 83]['a_binary64'], T[ 83]['b_binary64']>, T[ 83]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 84]['a_binary64'], T[ 84]['b_binary64']>, T[ 84]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 85]['a_binary64'], T[ 85]['b_binary64']>, T[ 85]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 86]['a_binary64'], T[ 86]['b_binary64']>, T[ 86]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 87]['a_binary64'], T[ 87]['b_binary64']>, T[ 87]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 88]['a_binary64'], T[ 88]['b_binary64']>, T[ 88]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 89]['a_binary64'], T[ 89]['b_binary64']>, T[ 89]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 90]['a_binary64'], T[ 90]['b_binary64']>, T[ 90]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 91]['a_binary64'], T[ 91]['b_binary64']>, T[ 91]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 92]['a_binary64'], T[ 92]['b_binary64']>, T[ 92]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 93]['a_binary64'], T[ 93]['b_binary64']>, T[ 93]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 94]['a_binary64'], T[ 94]['b_binary64']>, T[ 94]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 95]['a_binary64'], T[ 95]['b_binary64']>, T[ 95]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 96]['a_binary64'], T[ 96]['b_binary64']>, T[ 96]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 97]['a_binary64'], T[ 97]['b_binary64']>, T[ 97]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 98]['a_binary64'], T[ 98]['b_binary64']>, T[ 98]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[ 99]['a_binary64'], T[ 99]['b_binary64']>, T[ 99]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[100]['a_binary64'], T[100]['b_binary64']>, T[100]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[101]['a_binary64'], T[101]['b_binary64']>, T[101]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[102]['a_binary64'], T[102]['b_binary64']>, T[102]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[103]['a_binary64'], T[103]['b_binary64']>, T[103]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[104]['a_binary64'], T[104]['b_binary64']>, T[104]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[105]['a_binary64'], T[105]['b_binary64']>, T[105]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[106]['a_binary64'], T[106]['b_binary64']>, T[106]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[107]['a_binary64'], T[107]['b_binary64']>, T[107]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[108]['a_binary64'], T[108]['b_binary64']>, T[108]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[109]['a_binary64'], T[109]['b_binary64']>, T[109]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[110]['a_binary64'], T[110]['b_binary64']>, T[110]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[111]['a_binary64'], T[111]['b_binary64']>, T[111]['mul_binary64']>>,
  Expect<Equal<I64MultiplyBinary<T[112]['a_binary64'], T[112]['b_binary64']>, T[112]['mul_binary64']>>,

  Expect<Equal<T['length'], 113>>,
]
