import { Equal, Expect } from "type-testing"
import type { I64ClzBinary64 } from '../binary';
import { t, T } from '../test-cases/arithmetic-i64';
import { expect, test } from 'vitest';
import { twosComplementToBigInt, bigIntToTwosComplement, arithmeticBigInt } from "../test-utils";

test.each(t)('$a_binary64 === $clz_binary64', ({ a_binary64, clz_binary64 }) => {
  const a = twosComplementToBigInt(a_binary64);
  const actual = arithmeticBigInt.clz(a)
  const actual_binary = bigIntToTwosComplement(actual);
  expect(actual_binary).toBe(clz_binary64);
});

type i = 33
type a = T[i]['a']  // =>
type e = T[i]['clz']// =>
type ab = T[i]['a_binary64']  // =>
type eb = T[i]['clz_binary64']// =>
type xb = I64ClzBinary64<ab>    // =>

type tests = [
  Expect<Equal<I64ClzBinary64<T[  0]['a_binary64']>, T[  0]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  1]['a_binary64']>, T[  1]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  2]['a_binary64']>, T[  2]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  3]['a_binary64']>, T[  3]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  4]['a_binary64']>, T[  4]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  5]['a_binary64']>, T[  5]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  6]['a_binary64']>, T[  6]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  7]['a_binary64']>, T[  7]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  8]['a_binary64']>, T[  8]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[  9]['a_binary64']>, T[  9]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 10]['a_binary64']>, T[ 10]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 11]['a_binary64']>, T[ 11]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 12]['a_binary64']>, T[ 12]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 13]['a_binary64']>, T[ 13]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 14]['a_binary64']>, T[ 14]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 15]['a_binary64']>, T[ 15]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 16]['a_binary64']>, T[ 16]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 17]['a_binary64']>, T[ 17]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 18]['a_binary64']>, T[ 18]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 19]['a_binary64']>, T[ 19]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 20]['a_binary64']>, T[ 20]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 21]['a_binary64']>, T[ 21]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 22]['a_binary64']>, T[ 22]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 23]['a_binary64']>, T[ 23]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 24]['a_binary64']>, T[ 24]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 25]['a_binary64']>, T[ 25]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 26]['a_binary64']>, T[ 26]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 27]['a_binary64']>, T[ 27]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 28]['a_binary64']>, T[ 28]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 29]['a_binary64']>, T[ 29]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 30]['a_binary64']>, T[ 30]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 31]['a_binary64']>, T[ 31]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 32]['a_binary64']>, T[ 32]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 33]['a_binary64']>, T[ 33]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 34]['a_binary64']>, T[ 34]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 35]['a_binary64']>, T[ 35]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 36]['a_binary64']>, T[ 36]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 37]['a_binary64']>, T[ 37]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 38]['a_binary64']>, T[ 38]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 39]['a_binary64']>, T[ 39]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 40]['a_binary64']>, T[ 40]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 41]['a_binary64']>, T[ 41]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 42]['a_binary64']>, T[ 42]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 43]['a_binary64']>, T[ 43]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 44]['a_binary64']>, T[ 44]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 45]['a_binary64']>, T[ 45]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 46]['a_binary64']>, T[ 46]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 47]['a_binary64']>, T[ 47]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 48]['a_binary64']>, T[ 48]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 49]['a_binary64']>, T[ 49]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 50]['a_binary64']>, T[ 50]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 51]['a_binary64']>, T[ 51]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 52]['a_binary64']>, T[ 52]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 53]['a_binary64']>, T[ 53]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 54]['a_binary64']>, T[ 54]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 55]['a_binary64']>, T[ 55]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 56]['a_binary64']>, T[ 56]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 57]['a_binary64']>, T[ 57]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 58]['a_binary64']>, T[ 58]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 59]['a_binary64']>, T[ 59]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 60]['a_binary64']>, T[ 60]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 61]['a_binary64']>, T[ 61]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 62]['a_binary64']>, T[ 62]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 63]['a_binary64']>, T[ 63]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 64]['a_binary64']>, T[ 64]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 65]['a_binary64']>, T[ 65]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 66]['a_binary64']>, T[ 66]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 67]['a_binary64']>, T[ 67]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 68]['a_binary64']>, T[ 68]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 69]['a_binary64']>, T[ 69]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 70]['a_binary64']>, T[ 70]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 71]['a_binary64']>, T[ 71]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 72]['a_binary64']>, T[ 72]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 73]['a_binary64']>, T[ 73]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 74]['a_binary64']>, T[ 74]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 75]['a_binary64']>, T[ 75]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 76]['a_binary64']>, T[ 76]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 77]['a_binary64']>, T[ 77]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 78]['a_binary64']>, T[ 78]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 79]['a_binary64']>, T[ 79]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 80]['a_binary64']>, T[ 80]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 81]['a_binary64']>, T[ 81]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 82]['a_binary64']>, T[ 82]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 83]['a_binary64']>, T[ 83]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 84]['a_binary64']>, T[ 84]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 85]['a_binary64']>, T[ 85]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 86]['a_binary64']>, T[ 86]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 87]['a_binary64']>, T[ 87]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 88]['a_binary64']>, T[ 88]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 89]['a_binary64']>, T[ 89]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 90]['a_binary64']>, T[ 90]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 91]['a_binary64']>, T[ 91]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 92]['a_binary64']>, T[ 92]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 93]['a_binary64']>, T[ 93]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 94]['a_binary64']>, T[ 94]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 95]['a_binary64']>, T[ 95]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 96]['a_binary64']>, T[ 96]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 97]['a_binary64']>, T[ 97]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 98]['a_binary64']>, T[ 98]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[ 99]['a_binary64']>, T[ 99]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[100]['a_binary64']>, T[100]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[101]['a_binary64']>, T[101]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[102]['a_binary64']>, T[102]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[103]['a_binary64']>, T[103]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[104]['a_binary64']>, T[104]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[105]['a_binary64']>, T[105]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[106]['a_binary64']>, T[106]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[107]['a_binary64']>, T[107]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[108]['a_binary64']>, T[108]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[109]['a_binary64']>, T[109]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[110]['a_binary64']>, T[110]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[111]['a_binary64']>, T[111]['clz_binary64']>>,
  Expect<Equal<I64ClzBinary64<T[112]['a_binary64']>, T[112]['clz_binary64']>>,

  Expect<Equal<T['length'], 113>>,
]
