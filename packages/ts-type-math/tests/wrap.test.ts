import { Equal, Expect } from "type-testing"
import type { WrapBinary } from '../split';
import { t, T } from '../test-cases/wrap';
import { expect, test } from 'vitest';
import { twosComplementToNumber, twosComplementToBigInt, numberToTwosComplement, bigIntToTwosComplement, arithmeticBigInt, wasmConversion } from "../test-utils";

test.each(t)('wrap($a) === $wrap', ({ a, a_binary64, wrap, wrap_binary }) => {
  expect(a).toBe(twosComplementToBigInt(a_binary64));
  expect(a_binary64).toBe(bigIntToTwosComplement(a));

  expect(wrap).toBe(twosComplementToNumber(wrap_binary));
  expect(wrap_binary).toBe(numberToTwosComplement(wrap));
  
  expect(wasmConversion.wrap(a)).toBe(wrap);
})

type i = 41

type ab = T[i]['a_binary64'] // =>
type wb = T[i]['wrap_binary']// =>
type xb = WrapBinary<ab>     // =>

type a = T[i]['a']           // =>
type w = T[i]['wrap']        // =>

type tests = [
  Expect<Equal<WrapBinary<T[  0]['a_binary64']>, T[  0]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  1]['a_binary64']>, T[  1]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  2]['a_binary64']>, T[  2]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  3]['a_binary64']>, T[  3]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  4]['a_binary64']>, T[  4]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  5]['a_binary64']>, T[  5]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  6]['a_binary64']>, T[  6]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  7]['a_binary64']>, T[  7]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  8]['a_binary64']>, T[  8]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[  9]['a_binary64']>, T[  9]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 10]['a_binary64']>, T[ 10]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 11]['a_binary64']>, T[ 11]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 12]['a_binary64']>, T[ 12]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 13]['a_binary64']>, T[ 13]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 14]['a_binary64']>, T[ 14]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 15]['a_binary64']>, T[ 15]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 16]['a_binary64']>, T[ 16]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 17]['a_binary64']>, T[ 17]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 18]['a_binary64']>, T[ 18]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 19]['a_binary64']>, T[ 19]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 20]['a_binary64']>, T[ 20]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 21]['a_binary64']>, T[ 21]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 22]['a_binary64']>, T[ 22]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 23]['a_binary64']>, T[ 23]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 24]['a_binary64']>, T[ 24]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 25]['a_binary64']>, T[ 25]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 26]['a_binary64']>, T[ 26]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 27]['a_binary64']>, T[ 27]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 28]['a_binary64']>, T[ 28]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 29]['a_binary64']>, T[ 29]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 30]['a_binary64']>, T[ 30]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 31]['a_binary64']>, T[ 31]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 32]['a_binary64']>, T[ 32]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 33]['a_binary64']>, T[ 33]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 34]['a_binary64']>, T[ 34]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 35]['a_binary64']>, T[ 35]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 36]['a_binary64']>, T[ 36]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 37]['a_binary64']>, T[ 37]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 38]['a_binary64']>, T[ 38]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 39]['a_binary64']>, T[ 39]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 40]['a_binary64']>, T[ 40]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 41]['a_binary64']>, T[ 41]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 42]['a_binary64']>, T[ 42]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 43]['a_binary64']>, T[ 43]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 44]['a_binary64']>, T[ 44]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 45]['a_binary64']>, T[ 45]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 46]['a_binary64']>, T[ 46]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 47]['a_binary64']>, T[ 47]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 48]['a_binary64']>, T[ 48]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 49]['a_binary64']>, T[ 49]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 50]['a_binary64']>, T[ 50]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 51]['a_binary64']>, T[ 51]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 52]['a_binary64']>, T[ 52]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 53]['a_binary64']>, T[ 53]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 54]['a_binary64']>, T[ 54]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 55]['a_binary64']>, T[ 55]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 56]['a_binary64']>, T[ 56]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 57]['a_binary64']>, T[ 57]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 58]['a_binary64']>, T[ 58]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 59]['a_binary64']>, T[ 59]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 60]['a_binary64']>, T[ 60]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 61]['a_binary64']>, T[ 61]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 62]['a_binary64']>, T[ 62]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 63]['a_binary64']>, T[ 63]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 64]['a_binary64']>, T[ 64]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 65]['a_binary64']>, T[ 65]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 66]['a_binary64']>, T[ 66]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 67]['a_binary64']>, T[ 67]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 68]['a_binary64']>, T[ 68]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 69]['a_binary64']>, T[ 69]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 70]['a_binary64']>, T[ 70]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 71]['a_binary64']>, T[ 71]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 72]['a_binary64']>, T[ 72]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 73]['a_binary64']>, T[ 73]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 74]['a_binary64']>, T[ 74]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 75]['a_binary64']>, T[ 75]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 76]['a_binary64']>, T[ 76]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 77]['a_binary64']>, T[ 77]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 78]['a_binary64']>, T[ 78]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 79]['a_binary64']>, T[ 79]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 80]['a_binary64']>, T[ 80]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 81]['a_binary64']>, T[ 81]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 82]['a_binary64']>, T[ 82]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 83]['a_binary64']>, T[ 83]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 84]['a_binary64']>, T[ 84]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 85]['a_binary64']>, T[ 85]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 86]['a_binary64']>, T[ 86]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 87]['a_binary64']>, T[ 87]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 88]['a_binary64']>, T[ 88]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 89]['a_binary64']>, T[ 89]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 90]['a_binary64']>, T[ 90]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 91]['a_binary64']>, T[ 91]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 92]['a_binary64']>, T[ 92]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 93]['a_binary64']>, T[ 93]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 94]['a_binary64']>, T[ 94]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 95]['a_binary64']>, T[ 95]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 96]['a_binary64']>, T[ 96]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 97]['a_binary64']>, T[ 97]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 98]['a_binary64']>, T[ 98]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[ 99]['a_binary64']>, T[ 99]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[100]['a_binary64']>, T[100]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[101]['a_binary64']>, T[101]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[102]['a_binary64']>, T[102]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[103]['a_binary64']>, T[103]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[104]['a_binary64']>, T[104]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[105]['a_binary64']>, T[105]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[106]['a_binary64']>, T[106]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[107]['a_binary64']>, T[107]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[108]['a_binary64']>, T[108]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[109]['a_binary64']>, T[109]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[110]['a_binary64']>, T[110]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[111]['a_binary64']>, T[111]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[112]['a_binary64']>, T[112]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[113]['a_binary64']>, T[113]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[114]['a_binary64']>, T[114]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[115]['a_binary64']>, T[115]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[116]['a_binary64']>, T[116]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[117]['a_binary64']>, T[117]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[118]['a_binary64']>, T[118]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[119]['a_binary64']>, T[119]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[120]['a_binary64']>, T[120]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[121]['a_binary64']>, T[121]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[122]['a_binary64']>, T[122]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[123]['a_binary64']>, T[123]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[124]['a_binary64']>, T[124]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[125]['a_binary64']>, T[125]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[126]['a_binary64']>, T[126]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[127]['a_binary64']>, T[127]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[128]['a_binary64']>, T[128]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[129]['a_binary64']>, T[129]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[130]['a_binary64']>, T[130]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[131]['a_binary64']>, T[131]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[132]['a_binary64']>, T[132]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[133]['a_binary64']>, T[133]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[134]['a_binary64']>, T[134]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[135]['a_binary64']>, T[135]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[136]['a_binary64']>, T[136]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[137]['a_binary64']>, T[137]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[138]['a_binary64']>, T[138]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[139]['a_binary64']>, T[139]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[140]['a_binary64']>, T[140]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[141]['a_binary64']>, T[141]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[142]['a_binary64']>, T[142]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[143]['a_binary64']>, T[143]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[144]['a_binary64']>, T[144]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[145]['a_binary64']>, T[145]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[146]['a_binary64']>, T[146]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[147]['a_binary64']>, T[147]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[148]['a_binary64']>, T[148]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[149]['a_binary64']>, T[149]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[150]['a_binary64']>, T[150]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[151]['a_binary64']>, T[151]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[152]['a_binary64']>, T[152]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[153]['a_binary64']>, T[153]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[154]['a_binary64']>, T[154]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[155]['a_binary64']>, T[155]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[156]['a_binary64']>, T[156]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[157]['a_binary64']>, T[157]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[158]['a_binary64']>, T[158]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[159]['a_binary64']>, T[159]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[160]['a_binary64']>, T[160]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[161]['a_binary64']>, T[161]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[162]['a_binary64']>, T[162]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[163]['a_binary64']>, T[163]['wrap_binary']>>,
  Expect<Equal<WrapBinary<T[164]['a_binary64']>, T[164]['wrap_binary']>>,

  Expect<Equal<T['length'], 165>>,
]
