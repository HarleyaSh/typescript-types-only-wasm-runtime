import type { Expect, Equal } from 'type-testing';
import type { entry } from './single-i64div_s'
import { t, T, Ops } from '../../ts-type-math/test-cases/arithmetic-i64'

import { test, expect } from 'vitest';
import { getWasm } from '../utils'

test.each(t)('div_s($a, $b) === $div_s', async ({ a, b, div_s }) => {
  if (b === 0n) {
    return;
  }

  const entry = await getWasm<Ops['div_s']>("from-wat-single", 'single-i64div_s');
  expect(entry(a, b)).toStrictEqual(div_s);
});

type Case0   = Expect<Equal<entry<[T[  0]['a'], T[  0]['b']]>, T[  0]['div_s']>>;
type Case1   = Expect<Equal<entry<[T[  1]['a'], T[  1]['b']]>, T[  1]['div_s']>>;
type Case2   = Expect<Equal<entry<[T[  2]['a'], T[  2]['b']]>, T[  2]['div_s']>>;
type Case3   = Expect<Equal<entry<[T[  3]['a'], T[  3]['b']]>, T[  3]['div_s']>>;
type Case4   = Expect<Equal<entry<[T[  4]['a'], T[  4]['b']]>, T[  4]['div_s']>>;
type Case5   = Expect<Equal<entry<[T[  5]['a'], T[  5]['b']]>, T[  5]['div_s']>>;
type Case6   = Expect<Equal<entry<[T[  6]['a'], T[  6]['b']]>, T[  6]['div_s']>>;
type Case7   = Expect<Equal<entry<[T[  7]['a'], T[  7]['b']]>, T[  7]['div_s']>>;
type Case8   = Expect<Equal<entry<[T[  8]['a'], T[  8]['b']]>, T[  8]['div_s']>>;
type Case9   = Expect<Equal<entry<[T[  9]['a'], T[  9]['b']]>, T[  9]['div_s']>>;
type Case10  = Expect<Equal<entry<[T[ 10]['a'], T[ 10]['b']]>, T[ 10]['div_s']>>;
type Case11  = Expect<Equal<entry<[T[ 11]['a'], T[ 11]['b']]>, T[ 11]['div_s']>>;
type Case12  = Expect<Equal<entry<[T[ 12]['a'], T[ 12]['b']]>, T[ 12]['div_s']>>;
type Case13  = Expect<Equal<entry<[T[ 13]['a'], T[ 13]['b']]>, T[ 13]['div_s']>>;
type Case14  = Expect<Equal<entry<[T[ 14]['a'], T[ 14]['b']]>, T[ 14]['div_s']>>;
type Case15  = Expect<Equal<entry<[T[ 15]['a'], T[ 15]['b']]>, T[ 15]['div_s']>>;
type Case16  = Expect<Equal<entry<[T[ 16]['a'], T[ 16]['b']]>, T[ 16]['div_s']>>;
type Case17  = Expect<Equal<entry<[T[ 17]['a'], T[ 17]['b']]>, T[ 17]['div_s']>>;
type Case18  = Expect<Equal<entry<[T[ 18]['a'], T[ 18]['b']]>, T[ 18]['div_s']>>;
type Case19  = Expect<Equal<entry<[T[ 19]['a'], T[ 19]['b']]>, T[ 19]['div_s']>>;
type Case20  = Expect<Equal<entry<[T[ 20]['a'], T[ 20]['b']]>, T[ 20]['div_s']>>;
type Case21  = Expect<Equal<entry<[T[ 21]['a'], T[ 21]['b']]>, T[ 21]['div_s']>>;
type Case22  = Expect<Equal<entry<[T[ 22]['a'], T[ 22]['b']]>, T[ 22]['div_s']>>;
type Case23  = Expect<Equal<entry<[T[ 23]['a'], T[ 23]['b']]>, T[ 23]['div_s']>>;
type Case24  = Expect<Equal<entry<[T[ 24]['a'], T[ 24]['b']]>, T[ 24]['div_s']>>;
type Case25  = Expect<Equal<entry<[T[ 25]['a'], T[ 25]['b']]>, T[ 25]['div_s']>>;
type Case26  = Expect<Equal<entry<[T[ 26]['a'], T[ 26]['b']]>, T[ 26]['div_s']>>;
type Case27  = Expect<Equal<entry<[T[ 27]['a'], T[ 27]['b']]>, T[ 27]['div_s']>>;
type Case28  = Expect<Equal<entry<[T[ 28]['a'], T[ 28]['b']]>, T[ 28]['div_s']>>;
type Case29  = Expect<Equal<entry<[T[ 29]['a'], T[ 29]['b']]>, T[ 29]['div_s']>>;
type Case30  = Expect<Equal<entry<[T[ 30]['a'], T[ 30]['b']]>, T[ 30]['div_s']>>;
type Case31  = Expect<Equal<entry<[T[ 31]['a'], T[ 31]['b']]>, T[ 31]['div_s']>>;
type Case32  = Expect<Equal<entry<[T[ 32]['a'], T[ 32]['b']]>, T[ 32]['div_s']>>;
type Case33  = Expect<Equal<entry<[T[ 33]['a'], T[ 33]['b']]>, T[ 33]['div_s']>>;
type Case34  = Expect<Equal<entry<[T[ 34]['a'], T[ 34]['b']]>, T[ 34]['div_s']>>;
type Case35  = Expect<Equal<entry<[T[ 35]['a'], T[ 35]['b']]>, T[ 35]['div_s']>>;
type Case36  = Expect<Equal<entry<[T[ 36]['a'], T[ 36]['b']]>, T[ 36]['div_s']>>;
type Case37  = Expect<Equal<entry<[T[ 37]['a'], T[ 37]['b']]>, T[ 37]['div_s']>>;
type Case38  = Expect<Equal<entry<[T[ 38]['a'], T[ 38]['b']]>, T[ 38]['div_s']>>;
type Case39  = Expect<Equal<entry<[T[ 39]['a'], T[ 39]['b']]>, T[ 39]['div_s']>>;
type Case40  = Expect<Equal<entry<[T[ 40]['a'], T[ 40]['b']]>, T[ 40]['div_s']>>;
type Case41  = Expect<Equal<entry<[T[ 41]['a'], T[ 41]['b']]>, T[ 41]['div_s']>>;
type Case42  = Expect<Equal<entry<[T[ 42]['a'], T[ 42]['b']]>, T[ 42]['div_s']>>;
type Case43  = Expect<Equal<entry<[T[ 43]['a'], T[ 43]['b']]>, T[ 43]['div_s']>>;
type Case44  = Expect<Equal<entry<[T[ 44]['a'], T[ 44]['b']]>, T[ 44]['div_s']>>;
type Case45  = Expect<Equal<entry<[T[ 45]['a'], T[ 45]['b']]>, T[ 45]['div_s']>>;
type Case46  = Expect<Equal<entry<[T[ 46]['a'], T[ 46]['b']]>, T[ 46]['div_s']>>;
type Case47  = Expect<Equal<entry<[T[ 47]['a'], T[ 47]['b']]>, T[ 47]['div_s']>>;
type Case48  = Expect<Equal<entry<[T[ 48]['a'], T[ 48]['b']]>, T[ 48]['div_s']>>;
type Case49  = Expect<Equal<entry<[T[ 49]['a'], T[ 49]['b']]>, T[ 49]['div_s']>>;
type Case50  = Expect<Equal<entry<[T[ 50]['a'], T[ 50]['b']]>, T[ 50]['div_s']>>;
type Case51  = Expect<Equal<entry<[T[ 51]['a'], T[ 51]['b']]>, T[ 51]['div_s']>>;
type Case52  = Expect<Equal<entry<[T[ 52]['a'], T[ 52]['b']]>, T[ 52]['div_s']>>;
type Case53  = Expect<Equal<entry<[T[ 53]['a'], T[ 53]['b']]>, T[ 53]['div_s']>>;
type Case54  = Expect<Equal<entry<[T[ 54]['a'], T[ 54]['b']]>, T[ 54]['div_s']>>;
type Case55  = Expect<Equal<entry<[T[ 55]['a'], T[ 55]['b']]>, T[ 55]['div_s']>>;
type Case56  = Expect<Equal<entry<[T[ 56]['a'], T[ 56]['b']]>, T[ 56]['div_s']>>;
type Case57  = Expect<Equal<entry<[T[ 57]['a'], T[ 57]['b']]>, T[ 57]['div_s']>>;
type Case58  = Expect<Equal<entry<[T[ 58]['a'], T[ 58]['b']]>, T[ 58]['div_s']>>;
type Case59  = Expect<Equal<entry<[T[ 59]['a'], T[ 59]['b']]>, T[ 59]['div_s']>>;
type Case60  = Expect<Equal<entry<[T[ 60]['a'], T[ 60]['b']]>, T[ 60]['div_s']>>;
type Case61  = Expect<Equal<entry<[T[ 61]['a'], T[ 61]['b']]>, T[ 61]['div_s']>>;
type Case62  = Expect<Equal<entry<[T[ 62]['a'], T[ 62]['b']]>, T[ 62]['div_s']>>;
type Case63  = Expect<Equal<entry<[T[ 63]['a'], T[ 63]['b']]>, T[ 63]['div_s']>>;
type Case64  = Expect<Equal<entry<[T[ 64]['a'], T[ 64]['b']]>, T[ 64]['div_s']>>;
type Case65  = Expect<Equal<entry<[T[ 65]['a'], T[ 65]['b']]>, T[ 65]['div_s']>>;
type Case66  = Expect<Equal<entry<[T[ 66]['a'], T[ 66]['b']]>, T[ 66]['div_s']>>;
type Case67  = Expect<Equal<entry<[T[ 67]['a'], T[ 67]['b']]>, T[ 67]['div_s']>>;
type Case68  = Expect<Equal<entry<[T[ 68]['a'], T[ 68]['b']]>, T[ 68]['div_s']>>;
type Case69  = Expect<Equal<entry<[T[ 69]['a'], T[ 69]['b']]>, T[ 69]['div_s']>>;
type Case70  = Expect<Equal<entry<[T[ 70]['a'], T[ 70]['b']]>, T[ 70]['div_s']>>;
type Case71  = Expect<Equal<entry<[T[ 71]['a'], T[ 71]['b']]>, T[ 71]['div_s']>>;
type Case72  = Expect<Equal<entry<[T[ 72]['a'], T[ 72]['b']]>, T[ 72]['div_s']>>;
type Case73  = Expect<Equal<entry<[T[ 73]['a'], T[ 73]['b']]>, T[ 73]['div_s']>>;
type Case74  = Expect<Equal<entry<[T[ 74]['a'], T[ 74]['b']]>, T[ 74]['div_s']>>;
type Case75  = Expect<Equal<entry<[T[ 75]['a'], T[ 75]['b']]>, T[ 75]['div_s']>>;
type Case76  = Expect<Equal<entry<[T[ 76]['a'], T[ 76]['b']]>, T[ 76]['div_s']>>;
type Case77  = Expect<Equal<entry<[T[ 77]['a'], T[ 77]['b']]>, T[ 77]['div_s']>>;
type Case78  = Expect<Equal<entry<[T[ 78]['a'], T[ 78]['b']]>, T[ 78]['div_s']>>;
type Case79  = Expect<Equal<entry<[T[ 79]['a'], T[ 79]['b']]>, T[ 79]['div_s']>>;
type Case80  = Expect<Equal<entry<[T[ 80]['a'], T[ 80]['b']]>, T[ 80]['div_s']>>;
type Case81  = Expect<Equal<entry<[T[ 81]['a'], T[ 81]['b']]>, T[ 81]['div_s']>>;
type Case82  = Expect<Equal<entry<[T[ 82]['a'], T[ 82]['b']]>, T[ 82]['div_s']>>;
type Case83  = Expect<Equal<entry<[T[ 83]['a'], T[ 83]['b']]>, T[ 83]['div_s']>>;
type Case84  = Expect<Equal<entry<[T[ 84]['a'], T[ 84]['b']]>, T[ 84]['div_s']>>;
type Case85  = Expect<Equal<entry<[T[ 85]['a'], T[ 85]['b']]>, T[ 85]['div_s']>>;
type Case86  = Expect<Equal<entry<[T[ 86]['a'], T[ 86]['b']]>, T[ 86]['div_s']>>;
type Case87  = Expect<Equal<entry<[T[ 87]['a'], T[ 87]['b']]>, T[ 87]['div_s']>>;
type Case88  = Expect<Equal<entry<[T[ 88]['a'], T[ 88]['b']]>, T[ 88]['div_s']>>;
type Case89  = Expect<Equal<entry<[T[ 89]['a'], T[ 89]['b']]>, T[ 89]['div_s']>>;
type Case90  = Expect<Equal<entry<[T[ 90]['a'], T[ 90]['b']]>, T[ 90]['div_s']>>;
type Case91  = Expect<Equal<entry<[T[ 91]['a'], T[ 91]['b']]>, T[ 91]['div_s']>>;
type Case92  = Expect<Equal<entry<[T[ 92]['a'], T[ 92]['b']]>, T[ 92]['div_s']>>;
type Case93  = Expect<Equal<entry<[T[ 93]['a'], T[ 93]['b']]>, T[ 93]['div_s']>>;
type Case94  = Expect<Equal<entry<[T[ 94]['a'], T[ 94]['b']]>, T[ 94]['div_s']>>;
type Case95  = Expect<Equal<entry<[T[ 95]['a'], T[ 95]['b']]>, T[ 95]['div_s']>>;
type Case96  = Expect<Equal<entry<[T[ 96]['a'], T[ 96]['b']]>, T[ 96]['div_s']>>;
type Case97  = Expect<Equal<entry<[T[ 97]['a'], T[ 97]['b']]>, T[ 97]['div_s']>>;
type Case98  = Expect<Equal<entry<[T[ 98]['a'], T[ 98]['b']]>, T[ 98]['div_s']>>;
type Case99  = Expect<Equal<entry<[T[ 99]['a'], T[ 99]['b']]>, T[ 99]['div_s']>>;
type Case100 = Expect<Equal<entry<[T[100]['a'], T[100]['b']]>, T[100]['div_s']>>;
type Case101 = Expect<Equal<entry<[T[101]['a'], T[101]['b']]>, T[101]['div_s']>>;
type Case102 = Expect<Equal<entry<[T[102]['a'], T[102]['b']]>, T[102]['div_s']>>;
type Case103 = Expect<Equal<entry<[T[103]['a'], T[103]['b']]>, T[103]['div_s']>>;
type Case104 = Expect<Equal<entry<[T[104]['a'], T[104]['b']]>, T[104]['div_s']>>;
type Case105 = Expect<Equal<entry<[T[105]['a'], T[105]['b']]>, T[105]['div_s']>>;
type Case106 = Expect<Equal<entry<[T[106]['a'], T[106]['b']]>, T[106]['div_s']>>;
type Case107 = Expect<Equal<entry<[T[107]['a'], T[107]['b']]>, T[107]['div_s']>>;
type Case108 = Expect<Equal<entry<[T[108]['a'], T[108]['b']]>, T[108]['div_s']>>;
type Case109 = Expect<Equal<entry<[T[109]['a'], T[109]['b']]>, T[109]['div_s']>>;
type Case110 = Expect<Equal<entry<[T[110]['a'], T[110]['b']]>, T[110]['div_s']>>;
type Case111 = Expect<Equal<entry<[T[111]['a'], T[111]['b']]>, T[111]['div_s']>>;
type Case112 = Expect<Equal<entry<[T[112]['a'], T[112]['b']]>, T[112]['div_s']>>;

type CaseLength = Expect<Equal<T['length'], 113>>;

